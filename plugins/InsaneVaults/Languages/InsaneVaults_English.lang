#
# Official Language File
# To make your own language file, copy this file and edit the copy
#
# Changes made to this file will be reset!
# Do not edit it!
#

CommunityVaultInteractionListView.button.lore.interactedAt: "Interacted At: **%time%**"
CommunityVaultInteractionListView.button.lore.interactedPlayer: "Interacted Player: **%user%**"
CommunityVaultInteractionListView.button.lore.interactionType: "Interaction Type: **%interactionType%**"
CommunityVaultInteractionListView.button.lore.pressQ: "**Press Q** to **delete**"
CommunityVaultInteractionListView.gui.title: "Community Vault > Interactions"
CommunityVaultManageView.currencyButton.currencyPicker.title: "%vaultTypeName% > Currency"
CommunityVaultManageView.currencyButton.lore.desc1: "Use this option to define which currency"
CommunityVaultManageView.currencyButton.lore.desc2: "should be used to purchase this vault type"
CommunityVaultManageView.currencyButton.lore.leftClick: "**Left Click** to select **custom** currency"
CommunityVaultManageView.currencyButton.lore.mode: "Mode"
CommunityVaultManageView.currencyButton.lore.mode.customCurrency: "Custom Currency"
CommunityVaultManageView.currencyButton.lore.mode.vaultCurrency: "Vault Currency"
CommunityVaultManageView.currencyButton.lore.mode.vaultCurrency.notChosen: "Not chosen yet"
CommunityVaultManageView.currencyButton.lore.pressQ: "**Press Q** to use default **Vault currency**"
CommunityVaultManageView.currencyButton.name: "Custom Currency"
CommunityVaultManageView.currencyButton.notInstalled.lore.desc1: "**UltraEconomy** is **not** installed"
CommunityVaultManageView.currencyButton.notInstalled.lore.desc2: "To support multiple or custom"
CommunityVaultManageView.currencyButton.notInstalled.lore.desc3: "currencies UltraEconomy is required"
CommunityVaultManageView.currencyButton.notInstalled.name: "Missing UltraEconomy"
CommunityVaultManageView.gui.title: "Community Vault > Manage"
CommunityVaultManageView.iconButton.action.customModel.title.main: "Custom Model Id"
CommunityVaultManageView.iconButton.action.customModel.title.sub: "Change the custom model id of this item"
CommunityVaultManageView.iconButton.action.damageValue.title.main: "Durability"
CommunityVaultManageView.iconButton.action.damageValue.title.sub: "Change the damage value of this item"
CommunityVaultManageView.iconButton.action.example: "Example: **0** or **215**"
CommunityVaultManageView.iconButton.action.materialPicker.title: "%vaultTypeName% > Material"
CommunityVaultManageView.iconButton.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
CommunityVaultManageView.iconButton.lore.currentMaterial: "Current Material: **%materialName%**"
CommunityVaultManageView.iconButton.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
CommunityVaultManageView.iconButton.lore.description1: "Choose the icon, damage value and custom model"
CommunityVaultManageView.iconButton.lore.description2: "data the community vault will show up as"
CommunityVaultManageView.iconButton.lore.leftClick: "**Left Click** to **change** icon"
CommunityVaultManageView.iconButton.lore.pressQ: "**Press Q** to **reset** custom item data"
CommunityVaultManageView.iconButton.lore.rightClick: "**Right Click** to **change** damage value"
CommunityVaultManageView.iconButton.lore.shiftRightClick: "**Shift + Right Click** to **change** custom model data"
CommunityVaultManageView.iconButton.name: "Icon"
CommunityVaultManageView.ignoreFeesButton.lore.currentStatus: "Current Status: %status%"
CommunityVaultManageView.ignoreFeesButton.lore.description1: "If enabled, fees won't be"
CommunityVaultManageView.ignoreFeesButton.lore.description2: "taken while interacting with"
CommunityVaultManageView.ignoreFeesButton.lore.description3: "the community vault"
CommunityVaultManageView.ignoreFeesButton.lore.pressQ: "**Press Q** to **toggle**"
CommunityVaultManageView.ignoreFeesButton.name: "Ignore Fees"
CommunityVaultManageView.newUserButton.action.amount.title.main: "Max Item Withdraw Amount"
CommunityVaultManageView.newUserButton.action.amount.title.sub: "Type in a new max amount of to withdrew items"
CommunityVaultManageView.newUserButton.action.duration.noTime: "Minimum 1 Minute"
CommunityVaultManageView.newUserButton.action.duration.title: "Duration"
CommunityVaultManageView.newUserButton.lore.currentMaxItemWithdrawAmount: "Current withdraw amount: %amount%"
CommunityVaultManageView.newUserButton.lore.currentStatus: "Current status: %status%"
CommunityVaultManageView.newUserButton.lore.currentWithdrawDuration: "Current duration: %time%"
CommunityVaultManageView.newUserButton.lore.currentWithdrawInterval.unlimited: "Unlimited"
CommunityVaultManageView.newUserButton.lore.description1: "Define a duration in which only the new users"
CommunityVaultManageView.newUserButton.lore.description2: "can withdraw items from community vault and a"
CommunityVaultManageView.newUserButton.lore.description3: "optional amount of items which can be withdrew"
CommunityVaultManageView.newUserButton.lore.description4: "in the set amount of time while all other users"
CommunityVaultManageView.newUserButton.lore.description5: "can only deposit to the community vault"
CommunityVaultManageView.newUserButton.lore.leftClick: "**Left Click** to **set** duration"
CommunityVaultManageView.newUserButton.lore.pressQ: "**Press Q** to **toggle** new users feature"
CommunityVaultManageView.newUserButton.lore.rightClick: "**Right Click** to **change** amount of items"
CommunityVaultManageView.newUserButton.lore.shiftRightClick: "**Shift + Right Click** to **set** amount to **unlimited**"
CommunityVaultManageView.newUserButton.name: "New User Arrival"
CommunityVaultManageView.renameButton.action.title.main: "community vault as well as in the"
CommunityVaultManageView.renameButton.action.title.sub: "community vault gui title"
CommunityVaultManageView.renameButton.lore.click: "**Click** to **rename**"
CommunityVaultManageView.renameButton.lore.currentName: "Current Name: %currentName%"
CommunityVaultManageView.renameButton.lore.description1: "The name will show up for users in the main"
CommunityVaultManageView.renameButton.lore.description2: "vaults menu before they are opening the"
CommunityVaultManageView.renameButton.name: "Rename"
CommunityVaultManageView.wording.notAValidNumber: "Not a valid number"
CommunityVaultView.button.lore.click: "**Left Click** to withdraw **1x** this item"
CommunityVaultView.button.lore.click.action.failedFees: "withdraw this item **(%amount%x %itemName%)**"
CommunityVaultView.button.lore.click.action.failedSpace: "You can't withdraw **%amount%**x **%itemName%** because your inventory is full"
CommunityVaultView.button.lore.click.action.withFees: "Successfully withdrew **%amount%**x **%itemName%** for **%fee%** from **%vaultName%**"
CommunityVaultView.button.lore.click.action.withoutFees: "Successfully withdrew **%amount%**x **%itemName%** from **%vaultName%**"
CommunityVaultView.button.lore.shiftLeftClick: "**Shift + Left Click** to withdraw **%amount%x** this item"
CommunityVaultView.button.withdraw.failed.amountReached: "You can't withdraw any further items from this vault because you have reached the maximum amount of items you're able to withdraw as new user from this vault"
CommunityVaultView.button.withdraw.failed.noNewUser: "You're no longer stated as new user and can't withdraw items from this vault any longer"
CommunityVaultView.gui.title: "Community Vault"
CommunityVaultView.itemImport.importWithFees: "Successfully deposited **%amount%**x **%itemName%** for **%fee%** to **%vaultName%**"
CommunityVaultView.itemImport.importWithFees.failed: "deposit this item **(%amount%x %itemName%)**"
CommunityVaultView.itemImport.importWithoutFees: "Successfully deposited **%amount%**x **%itemName%** to **%vaultName%**"
CommunityVaultView.vaultInformationButton.lore.itemsAmount: "Current Items Amount: **%amount%**"
CommunityVaultView.vaultInformationButton.name: "Vault Information"
CommunityVaultView.vaultInteractionsButton.lore.click: "**Click** to view"
CommunityVaultView.vaultInteractionsButton.lore.description1: "View the log of which user deposited"
CommunityVaultView.vaultInteractionsButton.lore.description2: "and withdrew which items"
CommunityVaultView.vaultInteractionsButton.lore.interactionsAmount: "Interactions: **%amount%**"
CommunityVaultView.vaultInteractionsButton.name: "Interaction Log"
DurationArgument: "<Duration>"
FeatureEvents.onCouldPickup.fail: "You wasn't able to pickup **%amount%**x **%item%** because your preferred vault is full"
FeatureEvents.onCouldPickup.importBlacklistedItem.blacklistedForUser: "You can't deposit this item into your preferred vault because its blacklisted for you"
FeatureEvents.onCouldPickup.importBlacklistedItem.blacklistedForVaultType: "You can't deposit this item into your preferred vault because its blacklisted for your vault type"
FeatureEvents.onCouldPickup.importWithFees: "Successfully deposited **%amount%**x **%itemName%** for **%fee%** to your preferred vault **%vaultName%**"
FeatureEvents.onCouldPickup.importWithFees.failed: "deposit this item **(%amount%x %itemName%)**"
FeatureEvents.onCouldPickup.importWithoutFees: "Successfully deposited **%amount%**x **%itemName%** to your preferred vault **%vaultName%**"
FeatureEvents.onCouldPickup.noPerms: "You're not allowed to deposit items into this vault"
FeatureListView.communityVaultButton.lore.currentLockState: "Current lock state:"
FeatureListView.communityVaultButton.lore.currentName: "Current name: %name%"
FeatureListView.communityVaultButton.lore.description1: "This feature offers users the ability to"
FeatureListView.communityVaultButton.lore.description2: "deposit and withdraw items together into"
FeatureListView.communityVaultButton.lore.description3: "one vault (called **Community Vault**)"
FeatureListView.communityVaultButton.lore.leftClick: "**Left Click** to **manage**"
FeatureListView.communityVaultButton.lore.rightClick: "**Right Click** to **switch** lock state"
FeatureListView.communityVaultButton.name: "Community Vault"
FeatureListView.customCommandAliasesButton.action.restartRequired.register: "To register your custom command alias your server **must** be **restarted**"
FeatureListView.customCommandAliasesButton.action.restartRequired.unregister: "To unregister your custom command alias your server **must** be **restarted**"
FeatureListView.customCommandAliasesButton.action.title.main: "Custom Quick Access Alias"
FeatureListView.customCommandAliasesButton.action.title.sub: "Type in a new alias for quick accessing vaults"
FeatureListView.customCommandAliasesButton.lore.currentAlias: "Current alias: %alias%"
FeatureListView.customCommandAliasesButton.lore.description1: "This feature offers the ability"
FeatureListView.customCommandAliasesButton.lore.description2: "to customize the alias for"
FeatureListView.customCommandAliasesButton.lore.description3: "quick accessing vaults"
FeatureListView.customCommandAliasesButton.lore.leftClick: "**Left Click** to **change** custom alias"
FeatureListView.customCommandAliasesButton.name: "Custom Command Aliases"
FeatureListView.feature.lore.click.toggle: "**Press Q** to %action%"
FeatureListView.feature.lore.currentStatus: "Status: %status%"
FeatureListView.feature.notAvailableYet: "This feature will be added"
FeatureListView.feature.notAvailableYet2: "in a later update"
FeatureListView.gui.title: "Overview > Features"
FeatureListView.vaultExtendsInventory.lore.description1: "This feature offers you the ability to let"
FeatureListView.vaultExtendsInventory.lore.description2: "the preferred vault of users automatically"
FeatureListView.vaultExtendsInventory.lore.description3: "extend their inventory on item pickup"
FeatureListView.vaultExtendsInventory.lore.description4: "if there is no further space in it"
FeatureListView.vaultExtendsInventory.name: "Vault Extends Inventory"
FeatureListView.vaultMarketplaceButton.lore.description1: "This feature offers users the ability to list"
FeatureListView.vaultMarketplaceButton.lore.description2: "their own vaults for sale (including contents)"
FeatureListView.vaultMarketplaceButton.lore.description3: "which can be bought by other users"
FeatureListView.vaultMarketplaceButton.name: "Vault Marketplace"
FeatureListView.vaultPurgeButton.action.confirm.title: "Confirm force purge"
FeatureListView.vaultPurgeButton.action.forcePurge.success: "Successfully purged all items from all vaults"
FeatureListView.vaultPurgeButton.action.timePicker.title: "Interval"
FeatureListView.vaultPurgeButton.action.timePicker.title.noTime: "No Interval Purge"
FeatureListView.vaultPurgeButton.leftClick: "**Left Click** to **change** purge interval"
FeatureListView.vaultPurgeButton.lore.currentPurgeInterval: "Current Purge Interval: %time%"
FeatureListView.vaultPurgeButton.lore.currentPurgeInterval.noIntervalPurge: "No Interval Purge"
FeatureListView.vaultPurgeButton.lore.description1: "This feature offers the ability to purge vaults"
FeatureListView.vaultPurgeButton.lore.description2: "after a specific amount of time, to purge"
FeatureListView.vaultPurgeButton.lore.description3: "them right now and to purge specific"
FeatureListView.vaultPurgeButton.lore.description4: "items out of all existing vaults"
FeatureListView.vaultPurgeButton.name: "Vault Purge Feature"
FeatureListView.vaultPurgeButton.rightClick: "**Right Click** to **force purge** an **specific item**"
FeatureListView.vaultPurgeButton.shiftLeftClick: "**Shift + Left Click** to **force purge** all vaults"
GeneralSettingsPane.changeNameFeesButton.lore.description1: "Define which fee needs to be"
GeneralSettingsPane.changeNameFeesButton.lore.description2: "paid when renaming an vault"
GeneralSettingsPane.changeNameFeesButton.name: "Changing Name Fees"
GeneralSettingsPane.description.usedCurrency: "(The vault type currency will be used)"
GeneralSettingsPane.fees.example: "Example: **215** or **15000**"
GeneralSettingsPane.fees.title.sub: "Type in a new fee"
GeneralSettingsPane.firstVaultUnpaidButton.customName.title.actionBar: "Type in **none** to reset the custom name"
GeneralSettingsPane.firstVaultUnpaidButton.customName.title.main: "Custom Gifted Vault Name"
GeneralSettingsPane.firstVaultUnpaidButton.customName.title.sub: "Type in a custom name"
GeneralSettingsPane.firstVaultUnpaidButton.lore.currentCustomName: "Current Custom Name: %customName%"
GeneralSettingsPane.firstVaultUnpaidButton.lore.currentVaultType: "Current Vault Type: %vaultType%"
GeneralSettingsPane.firstVaultUnpaidButton.lore.desc1: "Specify the Vault Type that will be"
GeneralSettingsPane.firstVaultUnpaidButton.lore.desc2: "given once to new Users for free"
GeneralSettingsPane.firstVaultUnpaidButton.lore.desc3: "(Recurring creation Cost is also free)"
GeneralSettingsPane.firstVaultUnpaidButton.lore.leftClick: "**Left Click** to select **Vault Type**"
GeneralSettingsPane.firstVaultUnpaidButton.lore.pressQ: "**Press Q** to toggle"
GeneralSettingsPane.firstVaultUnpaidButton.lore.rightClick: "**Right Click** to customize the name of the gifted Vault"
GeneralSettingsPane.firstVaultUnpaidButton.name: "First Vault Unpaid"
GeneralSettingsPane.firstVaultUnpaidButton.selector.title: "Select gifted VaultType"
GeneralSettingsPane.iconChangeFeesButton.lore.description1: "Define which fee needs to be paid"
GeneralSettingsPane.iconChangeFeesButton.lore.description2: "when changing icon of an vault"
GeneralSettingsPane.iconChangeFeesButton.name: "Changing Icon Fees"
GeneralSettingsPane.invalidNumber: "Invalid Number"
GeneralSettingsPane.lore.click.change: "**Click** to **change**"
GeneralSettingsPane.lore.click.toggle: "**Click** to %status%"
GeneralSettingsPane.lore.currentFee: "Current Fee: %fee%"
GeneralSettingsPane.lore.currentStatus: "Current Status: %status%"
GeneralSettingsPane.lore.free: "Free"
GeneralSettingsPane.lore.none: "None"
GeneralSettingsPane.name: "General"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.lore.description1: "If enabled, all fees will be added to the"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.lore.description2: "Government account of **UltraEconomy**"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.lore.description3: "(Enabling putting fees on it in the"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.lore.description4: "bank feature settings is required)"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.name: "Putting Costs on Government Account"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.notInstalled.lore.description1: "**UltraEconomy** is **not** installed"
GeneralSettingsPane.puttingCostsOnGovernmentAccountButton.notInstalled.lore.description2: "To this feature UltraEconomy is required"
GeneralSettingsPane.refundFeesButton.lore.description1: "If enabled, vault type cost and fees for each"
GeneralSettingsPane.refundFeesButton.lore.description2: "shared accesses will be refunded (On Deletion)"
GeneralSettingsPane.refundFeesButton.name: "Refund Fees"
GeneralSettingsPane.sharedAccessCreationFees.lore.description1: "Define which fee needs to be paid when"
GeneralSettingsPane.sharedAccessCreationFees.lore.description2: "creating new shared accesses"
GeneralSettingsPane.sharedAccessCreationFees.name: "Create Shared Access Fees"
GeneralSettingsPane.transferringOwnershipFeesButton.lore.description1: "Define which fee needs to be paid when"
GeneralSettingsPane.transferringOwnershipFeesButton.lore.description2: "transferring the ownership of an vault"
GeneralSettingsPane.transferringOwnershipFeesButton.name: "Transferring Ownership Fees"
GeneralSettingsPane.vaultInteractionFees.action.deposit.title.main: "Item Deposit Fees"
GeneralSettingsPane.vaultInteractionFees.action.withdraw.title.main: "Item Withdraw Fees"
GeneralSettingsPane.vaultInteractionFees.lore.currentDepositFee: "Current Deposit Fee: %fee% per deposit"
GeneralSettingsPane.vaultInteractionFees.lore.currentWithdrawFee: "Current Withdraw Fee: %fee% per withdraw"
GeneralSettingsPane.vaultInteractionFees.lore.description1: "Define which fee needs to be paid when depositing"
GeneralSettingsPane.vaultInteractionFees.lore.description2: "or withdrawing items from an vault (Per Slot)"
GeneralSettingsPane.vaultInteractionFees.lore.leftClick: "**Left Click** to **change** item deposit fee"
GeneralSettingsPane.vaultInteractionFees.lore.rightClick: "**Right Click** to **change** item withdraw fee"
GeneralSettingsPane.vaultInteractionFees.name: "Item Deposit & Withdraw Fees"
GeneralSettingsPane.vaultTypeFeesButton.action.title: "Interval"
GeneralSettingsPane.vaultTypeFeesButton.lore.currentOverdraftAction: "Overdraft Action"
GeneralSettingsPane.vaultTypeFeesButton.lore.currentPaymentInterval: "Current Interval: %time%"
GeneralSettingsPane.vaultTypeFeesButton.lore.currentPaymentInterval.oneTime: "One Time"
GeneralSettingsPane.vaultTypeFeesButton.lore.description1: "Define the interval the vault type cost"
GeneralSettingsPane.vaultTypeFeesButton.lore.description2: "needs to be paid (Recurring or One Time)"
GeneralSettingsPane.vaultTypeFeesButton.lore.description3: "Additionally define if the vault should"
GeneralSettingsPane.vaultTypeFeesButton.lore.description4: "get the **full locked** state until the"
GeneralSettingsPane.vaultTypeFeesButton.lore.description5: "user can afford the recurring cost again"
GeneralSettingsPane.vaultTypeFeesButton.lore.description6: "or if it should get **deleted** if the"
GeneralSettingsPane.vaultTypeFeesButton.lore.description7: "user can't afford the recurring cost"
GeneralSettingsPane.vaultTypeFeesButton.lore.leftClick: "**Left Click** to **change** payment interval"
GeneralSettingsPane.vaultTypeFeesButton.lore.pressQ: "**Press Q** to set the cost to **One Time**"
GeneralSettingsPane.vaultTypeFeesButton.lore.rightClick: "**Right Click** to **switch** overdraft action"
GeneralSettingsPane.vaultTypeFeesButton.name: "Vault Type Fees"
InsaneVaults.noVault: "Could not **connect** to Vault"
InsaneVaults.notEnoughBalance: "You need at least a balance of **%requiredBalance%** to %wording%"
IvcCommand.communityVault.ignoreFees.toggle: "Successfully %status% ignoring fees while interacting with the community vault"
IvcCommand.communityVault.newName: "Successfully defined **%name%** as new name for the community vault"
IvcCommand.communityVault.newUserArrival.customAmount: "Successfully set the **withdrawable item amount** of new users to **%amount%**"
IvcCommand.communityVault.newUserArrival.customInterval: "Successfully set the **New User State Duration** to **%time%**"
IvcCommand.communityVault.newUserArrival.toggleDisabled: "Successfully **disabled** the new user arrival feature of the community vault"
IvcCommand.communityVault.newUserArrival.toggleEnabled: "Successfully **enabled** the new user arrival feature of the community vault"
IvcCommand.communityVault.newUserArrival.unlimitedAmount: "Successfully set the **withdrawable item amount** of new users to **unlimited**"
IvcCommand.communityVault.toggle: "Successfully %status% the community vault feature"
IvcCommand.customCommandAlias.restartRequired.register: "To register your custom command alias your server **must** be **restarted**"
IvcCommand.customCommandAlias.restartRequired.unregister: "To unregister your custom command alias your server **must** be **restarted**"
IvcCommand.customCommandAlias.set: "Successfully defined **/%command%** as new alias for quick accessing vaults"
IvcCommand.customCommandAlias.toggle: "Successfully %status% the custom command alias for quick accessing vaults"
IvcCommand.invalidBooleanArgument: "Not a valid status argument (True or False)"
IvcCommand.invalidDurationArgument: "Not a valid duration"
IvcCommand.invalidIntegerArgument: "Not a valid number"
IvcCommand.invalidUser: "Invalid vault type"
IvcCommand.invalidVaultType: "Invalid vault type"
IvcCommand.newIconFee: "Successfully set **Change Icon Fee** to **%fee%**"
IvcCommand.newItemDepositFee: "Successfully set **Item Deposit Fee** to **%fee%**"
IvcCommand.newItemWithdrawFee: "Successfully set **Item Withdraw Fee** to **%fee%**"
IvcCommand.newNameFee: "Successfully set **Change Name Fee** to **%fee%**"
IvcCommand.newSharedAccessFee: "Successfully set **Create Shared Access Fee** to **%fee%**"
IvcCommand.newTransferOwnershipFee: "Successfully set **Transfer Ownership Fee** to **%fee%**"
IvcCommand.puttingOnGovernmentAccount: "Successfully %status% putting fees and vault type creation costs on UltraEconomy's Government Account"
IvcCommand.refundFees: "Successfully %status% refund vault type creation cost and new shared access fees"
IvcCommand.vault.create: "Successfully created a unpaid vault for user **%user%** based on vault type **%vaultType%**"
IvcCommand.vaultExtendsInventory: "Successfully %status% the vault extends inventory Feature"
IvcCommand.vaultPurge.forcePurge: "Successfully purged all existing vaults"
IvcCommand.vaultPurge.interval: "Successfully set the **Purging all existing vaults** interval to **%time%**"
IvcCommand.vaultPurge.toggle: "Successfully %status% puring all existing vaults after a specific amount of time"
IvcCommand.vaultType.create: "Successfully created the vault type **%vaultTypeName%**"
IvcCommand.vaultType.manage.name: "Successfully **changed** the name of vault type **%vaultType%** to **%newName%**"
IvcCommand.vaultType.manage.permission: "Successfully **applied** the permission **%permission%** to **%vaultType%**"
IvcCommand.vaultType.manage.purchasePrice: "Successfully **set** the purchase price of vault type **%vaultType%** to **%price%**"
IvcCommand.vaultType.manage.sharedAccess: "Successfully **set** the amount of shared accesses of vault type **%vaultType%** to **%amount%**"
IvcCommand.vaultType.manage.size: "Successfully **set** the size of vault type **%vaultType%** to **%size%** slots"
IvcCommand.vaultType.maximumReached: "You can only create a maximum of 10 vault types"
IvcCommand.vaultType.size: "(Size: **%size%** Slots)"
IvcCommand.vaultType.togglePurchase: "Successfully %status% **%vaultType%** for getting purchased"
IvcCommand.vaultTypeFees.oneTime: "Successfully set the **vault type creation cost** to **One Time**"
IvcCommand.vaultTypeFees.overdraftType.delete: "Successfully set the **overdraft type** to **delete the vault** of an user if he can't afford the recurring creation cost"
IvcCommand.vaultTypeFees.overdraftType.fullLock: "Successfully set the **overdraft type** to **fully lock the vault** of an user if he can't afford the recurring creation cost"
IvcCommand.vaultTypeFees.recurringInterval: "Successfully set the **recurring vault type creation cost** to **%time%**"
Overview.featureButton.lore.click: "**Click** to manage"
Overview.featureButton.lore.description1: "Manage and expand the functionality"
Overview.featureButton.lore.headline.description2: "of InsaneVaults to make it perfectly fit"
Overview.featureButton.lore.headline.description3: "with your individual server setup"
Overview.featureButton.name: "Features"
Overview.importButton.action.title: "Select the to used Vault Type"
Overview.importButton.lore.availableImporters: "Available Importers"
Overview.importButton.lore.click: "**Click** to get started"
Overview.importButton.lore.description1: "Import existing Vaults and Backpacks"
Overview.importButton.lore.description2: "from different plugins"
Overview.importButton.name: "Import Vaults"
Overview.settingsButton.lore.click: "**Click** to view"
Overview.settingsButton.name: "Settings"
Overview.usersButton.lore.click: "**Click** to view"
Overview.usersButton.lore.headline.users: "Users"
Overview.usersButton.lore.headline.usersAmount: "Registered Users: **%amount%**"
Overview.usersButton.name: "Users"
Overview.vaultTypesButton.lore.click: "**Click** to customize"
Overview.vaultTypesButton.lore.description1: "Configure individual vault types which can be"
Overview.vaultTypesButton.lore.description2: "used (Amount of Shared Accesses, the used"
Overview.vaultTypesButton.lore.description3: "currency to buy, price, vault size and"
Overview.vaultTypesButton.lore.description4: "blacklisting specific items from"
Overview.vaultTypesButton.lore.description5: "this vault type)"
Overview.vaultTypesButton.lore.headline.vaultTypes: "Vault Types"
Overview.vaultTypesButton.lore.headline.vaultTypesAmount: "Created Vault Types: **%amount%**"
Overview.vaultTypesButton.name: "Vault Types"
Overview.vaultsButton.lore.click: "**Click** to view"
Overview.vaultsButton.lore.headline.vaultsAmount: "Created Vaults: **%amount%**"
Overview.vaultsButton.name: "Vaults"
Overview.wording.none: "None"
PluginEvents.lockOnLosingPerms.vaultLockedLostPerms: "Your vault **%vaultName%** got locked because you lost the required permission"
PluginEvents.lockOnLosingPerms.vaultUnlocked: "Your vault **%vaultName%** got unlocked because you regained the required permission"
PluginEvents.payedFeesWhileOffline: "While you was offline you have paid **%amount%** for fees to keep your vault active"
PluginEvents.recurringVaultTypeCost.failed.delete: "Your vault **%vaultName%** got deleted because you wasn't able to pay the recurring creation cost of **%fee%**"
PluginEvents.recurringVaultTypeCost.failed.lock: "Your vault **%vaultName%** is now fully locked because you wasn't able to pay the recurring creation cost"
PluginEvents.recurringVaultTypeCost.failed.lock2: "It will get automatically unlocked if you're able to pay the upcoming recurring creation cost of **%fee%**"
PluginEvents.recurringVaultTypeCost.success: "You have paid **%fee%** to keep your vault **%vaultName%** active"
PurgeSpecificItemView.confirmButton.action.ready.success: "Successfully purged selected item from all vaults"
PurgeSpecificItemView.confirmButton.notReady.name: "No Item Imported"
PurgeSpecificItemView.confirmButton.ready.confirm.title: "Confirm purge"
PurgeSpecificItemView.confirmButton.ready.lore.click1: "**Click** to purge the"
PurgeSpecificItemView.confirmButton.ready.lore.click2: "imported item from all"
PurgeSpecificItemView.confirmButton.ready.lore.click3: "existing vaults"
PurgeSpecificItemView.confirmButton.ready.name: "Confirm"
PurgeSpecificItemView.gui.title: "Force Purge > Specific Item"
PurgeSpecificItemView.itemButtonName.lore.importRequired1: "Import the to be purged item"
PurgeSpecificItemView.itemButtonName.lore.importRequired2: "from your inventory by"
PurgeSpecificItemView.itemButtonName.lore.importRequired3: "clicking on it"
PurgeSpecificItemView.itemButtonName.name: "Purge Specific Item"
UserBlacklistedItemListView.action.title: "Blacklisted Items > Material"
UserBlacklistedItemListView.button.action.customModel.title.main: "Custom Model Id"
UserBlacklistedItemListView.button.action.customModel.title.sub: "Change the custom model id of this item"
UserBlacklistedItemListView.button.action.damageValue.title.main: "Durability"
UserBlacklistedItemListView.button.action.damageValue.title.sub: "Change the damage value of this item"
UserBlacklistedItemListView.button.action.example: "Example: **0** or **215**"
UserBlacklistedItemListView.button.action.maxAmount.title.main: "Max Amount"
UserBlacklistedItemListView.button.action.maxAmount.title.sub: "Change the amount this item can be in the vault"
UserBlacklistedItemListView.button.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
UserBlacklistedItemListView.button.lore.currentMaterial: "Current Material: **%materialName%**"
UserBlacklistedItemListView.button.lore.currentMaxAmount: "Current Max Amount: **%amount%**"
UserBlacklistedItemListView.button.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
UserBlacklistedItemListView.button.lore.description1: "Choose the damage value and custom model data to optionally"
UserBlacklistedItemListView.button.lore.description2: "specify the to be blacklisted item even more detailed."
UserBlacklistedItemListView.button.lore.description3: "As well as setting the max amount this item can be put"
UserBlacklistedItemListView.button.lore.description4: "inside a vault which is held by this user"
UserBlacklistedItemListView.button.lore.leftClick: "**Left Click** to **change** the max amount this item can contain in vault"
UserBlacklistedItemListView.button.lore.pressQ: "**Press Q** to **delete** "
UserBlacklistedItemListView.button.lore.rightClick: "**Right Click** to **change** custom model data"
UserBlacklistedItemListView.button.lore.shiftLeftClick: "**Shift + Left Click** to **change** damage value"
UserBlacklistedItemListView.button.lore.shiftRightClick: "**Shift + Right Click** to **reset** custom item data"
UserBlacklistedItemListView.gui.title: "%userName% > Blacklisted Items"
UserBlacklistedItemListView.itemImport.alreadyContainsItemStack: "This ItemStack is already in the blacklist of user **%userName%**"
UserBlacklistedItemListView.lore: "**Click** to create new blacklisted item"
UserBlacklistedItemListView.name: "New Blacklisted Item"
UserBlacklistedItemListView.wording.notAValidNumber: "Not a valid number"
UserListView.argument.none: "None"
UserListView.gui.lore.deleteUser: "Confirm deletion of User %target%"
UserListView.gui.lore.firstJoin: "First join: **%date%**"
UserListView.gui.lore.leftClick: "**Left Click** to view User"
UserListView.gui.lore.ownVaults: "Own vaults: **%amount%**"
UserListView.gui.lore.q: "**Press Q** to **delete**"
UserListView.gui.lore.sharedVaults: "Shared vaults: **%amount%**"
UserListView.gui.title: "Overview > Users"
UserListView.onlineFilter.disableAction: "Click to **show** Offline Users"
UserListView.onlineFilter.enableAction: "Click to **hide** Offline Users"
UserListView.onlineFilter.title: "Visibility"
UserOWnVaultsListView.gui.title: "%user% > Own Vaults"
UserOwnVaultView.button.lore.click: "**Left Click** to withdraw **1x** this item"
UserOwnVaultView.button.lore.click.action.failedFees: "withdraw this item **(%amount%x %itemName%)**"
UserOwnVaultView.button.lore.click.action.failedSpace: "You can't withdraw **%amount%**x **%itemName%** because your inventory is full"
UserOwnVaultView.button.lore.click.action.withFees: "Successfully withdrew **%amount%**x **%itemName%** for **%fee%** from **%vaultName%**"
UserOwnVaultView.button.lore.click.action.withoutFees: "Successfully withdrew **%amount%**x **%itemName%** from **%vaultName%**"
UserOwnVaultView.button.lore.shiftLeftClick: "**Shift + Left Click** to withdraw **%amount%x** this item"
UserOwnVaultView.itemImport.importBlacklistedItem.blacklistedForUser: "You can't deposit this item into this vault because its blacklisted for you"
UserOwnVaultView.itemImport.importBlacklistedItem.blacklistedForVaultType: "You can't deposit this item because its blacklisted for your vault type"
UserOwnVaultView.itemImport.importBlacklistedItem.confirmationTitle: "Confirm import of blacklisted item"
UserOwnVaultView.itemImport.importWithFees: "Successfully deposited **%amount%**x **%itemName%** for **%fee%** to **%vaultName%**"
UserOwnVaultView.itemImport.importWithFees.failed: "deposit this item **(%amount%x %itemName%)**"
UserOwnVaultView.itemImport.importWithoutFees: "Successfully deposited **%amount%**x **%itemName%** to **%vaultName%**"
UserOwnVaultView.itemImport.noPerms: "You're not allowed to deposit items into this vault"
UserOwnVaultView.itemImport.vaultFull: "You can't deposit %item% into your vault because you have reached your vault types size limit"
UserOwnVaultsListView.newPaidOwnVaultButton.action.failedLimitReached: "You can't create another vault because you have reached the maximum amount of vaults you can hold at the same time"
UserOwnVaultsListView.newPaidOwnVaultButton.action.notEnoughBalance: "purchase a vault of type **%vaultType%**"
UserOwnVaultsListView.newPaidOwnVaultButton.action.success: "Successfully purchased a new vault of type **%typeName%**"
UserOwnVaultsListView.newPaidOwnVaultButton.action.successWithFee: "Successfully purchased a new vault of type **%typeName%** for **%fee%**"
UserOwnVaultsListView.newPaidOwnVaultButton.action.title: "%user% > Choose Vault Type"
UserOwnVaultsListView.newPaidOwnVaultButton.lore.click: "**Click** to create a new"
UserOwnVaultsListView.newPaidOwnVaultButton.lore.click2: "vault for yourself*"
UserOwnVaultsListView.newPaidOwnVaultButton.name: "New Own Vault"
UserOwnVaultsListView.newUnpaidOwnVaultButton.action.title: "%user% > Choose Vault Type"
UserOwnVaultsListView.newUnpaidOwnVaultButton.lore.click: "**Click** to create a new"
UserOwnVaultsListView.newUnpaidOwnVaultButton.lore.click2: "vault for **%user%**"
UserOwnVaultsListView.newUnpaidOwnVaultButton.lore.click3: "(unpaid)"
UserOwnVaultsListView.newUnpaidOwnVaultButton.name: "New Unpaid Own Vault"
UserOwnVaultsListView.ownVaultButton.action.deleteWithRefund: "Successfully deleted vault **%vaultName%** (Refunded fees: **%refundedFees%**)"
UserOwnVaultsListView.ownVaultButton.action.deleteWithoutRefund: "Successfully deleted vault **%vaultName%** without refunding fees"
UserOwnVaultsListView.ownVaultButton.action.deletion.title: "deletion of vault '%vaultName%'"
UserOwnVaultsListView.ownVaultButton.action.openVault.title: "%user% > Vaults > %vaultName%"
UserOwnVaultsListView.ownVaultButton.lore.createdAt: "Created at: **%date%**"
UserOwnVaultsListView.ownVaultButton.lore.currentHolder: "Current holder: **%holderName%**"
UserOwnVaultsListView.ownVaultButton.lore.currentLockState: "Current lock state:"
UserOwnVaultsListView.ownVaultButton.lore.currentVaultType: "Current vault type: **%vaultTypeName%**"
UserOwnVaultsListView.ownVaultButton.lore.giftedVault: "Gifted Vault"
UserOwnVaultsListView.ownVaultButton.lore.holder: "Founder: **%founderName%**"
UserOwnVaultsListView.ownVaultButton.lore.lastAccess: "Last access: **%date%**"
UserOwnVaultsListView.ownVaultButton.lore.leftClick: "**Left Click** to open"
UserOwnVaultsListView.ownVaultButton.lore.locked.deposit: "Locked for further deposits"
UserOwnVaultsListView.ownVaultButton.lore.locked.full: "Full locked for further interactions"
UserOwnVaultsListView.ownVaultButton.lore.locked.lostPerms: "Locked because of lost required perm"
UserOwnVaultsListView.ownVaultButton.lore.locked.withdraw: "Locked for further withdraws"
UserOwnVaultsListView.ownVaultButton.lore.notDefined: "NOT DEFINED"
UserOwnVaultsListView.ownVaultButton.lore.preferredVault: "Preferred Vault"
UserOwnVaultsListView.ownVaultButton.lore.pressQ: "**Press Q** to **delete**"
UserOwnVaultsListView.ownVaultButton.lore.rightClick: "**Right Click** to **switch** lock state"
UserSelectorView.construct.lore: "**Click** to **select**"
UserSelectorView.onlineFilter.disableAction: "Click to **show** Offline Users"
UserSelectorView.onlineFilter.enableAction: "Click to **hide** Offline Users"
UserSelectorView.onlineFilter.title: "Visibility"
UserSettingsView.button.click.toggle: "**Click** to toggle"
UserSettingsView.button.currentStatus: "Current Status: %status%"
UserSettingsView.extendInventoryMessageButton.lore.desc1: "If disabled every message during"
UserSettingsView.extendInventoryMessageButton.lore.desc2: "one of your Vaults is extending"
UserSettingsView.extendInventoryMessageButton.lore.desc3: "your full Inventory won't"
UserSettingsView.extendInventoryMessageButton.lore.desc4: "get sent to you"
UserSettingsView.extendInventoryMessageButton.name: "Item Deposit Message"
UserSettingsView.itemDepositButton.lore.desc1: "If enabled InsaneVaults will send"
UserSettingsView.itemDepositButton.lore.desc2: "you on every Item Deposit a message"
UserSettingsView.itemDepositButton.name: "Item Deposit Message"
UserSettingsView.itemWithdrawButton.lore.desc1: "If enabled InsaneVaults will send"
UserSettingsView.itemWithdrawButton.lore.desc2: "you on every Item Withdraw a message"
UserSettingsView.itemWithdrawButton.name: "Item Withdraw Message"
UserSettingsView.model.title: "Overview > Own Settings"
UserSharedVaultsListView.gui.title: "%user% > Shared Vaults"
UserSharedVaultsListView.ownVaultButton.lore.giftedVault: "Gifted Vault"
UserSharedVaultsListView.sharedVaultButton.action.deleteWithRefund: "Successfully deleted vault **%vaultName%** (Refunded fees: **%refundedFees%**)"
UserSharedVaultsListView.sharedVaultButton.action.deleteWithoutRefund: "Successfully deleted vault **%vaultName%** without refunding fees"
UserSharedVaultsListView.sharedVaultButton.action.deletion.title: "deletion of vault '%vaultName%'"
UserSharedVaultsListView.sharedVaultButton.action.openVault.title: "%user% > Shared Vaults > %vaultName%"
UserSharedVaultsListView.sharedVaultButton.lore.createdAt: "Created at: **%date%**"
UserSharedVaultsListView.sharedVaultButton.lore.currentHolder: "Current holder: **%holderName%**"
UserSharedVaultsListView.sharedVaultButton.lore.currentLockState: "Current lock state:"
UserSharedVaultsListView.sharedVaultButton.lore.currentVaultType: "Current vault type: **%vaultTypeName%**"
UserSharedVaultsListView.sharedVaultButton.lore.holder: "Founder: **%founderName%**"
UserSharedVaultsListView.sharedVaultButton.lore.lastAccess: "Last access: **%date%**"
UserSharedVaultsListView.sharedVaultButton.lore.leftClick: "**Left Click** to open"
UserSharedVaultsListView.sharedVaultButton.lore.notDefined: "NOT DEFINED"
UserSharedVaultsListView.sharedVaultButton.lore.pressQ: "**Press Q** to **delete**"
UserSharedVaultsListView.sharedVaultButton.lore.rightClick: "**Right Click** to **switch** lock state"
UserVaultSettingsView.iconButton.action.customModel.title.main: "Custom Model Id"
UserVaultSettingsView.iconButton.action.customModel.title.sub: "Change the custom model id of this item"
UserVaultSettingsView.iconButton.action.damageValue.title.main: "Durability"
UserVaultSettingsView.iconButton.action.damageValue.title.sub: "Change the damage value of this item"
UserVaultSettingsView.iconButton.action.example: "Example: **0** or **215**"
UserVaultSettingsView.iconButton.action.materialPicker.title: "%vaultName% > Material"
UserVaultSettingsView.iconButton.actionWithFee: "Successfully changed icon for **%fee%** to **%iconName%**"
UserVaultSettingsView.iconButton.actionWithFeeFailed: "change icon of this vault"
UserVaultSettingsView.iconButton.actionWithoutFee: "Successfully changed icon to **%iconName%**"
UserVaultSettingsView.iconButton.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
UserVaultSettingsView.iconButton.lore.currentMaterial: "Current Material: **%materialName%**"
UserVaultSettingsView.iconButton.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
UserVaultSettingsView.iconButton.lore.description1: "Choose the icon, damage value and custom"
UserVaultSettingsView.iconButton.lore.description2: "model data this vault will show up as"
UserVaultSettingsView.iconButton.lore.leftClick: "**Left Click** to **change** icon"
UserVaultSettingsView.iconButton.lore.pressQ: "**Press Q** to **reset** custom item data"
UserVaultSettingsView.iconButton.lore.rightClick: "**Right Click** to **change** damage value"
UserVaultSettingsView.iconButton.lore.shiftRightClick: "**Shift + Right Click** to **change** custom model data"
UserVaultSettingsView.iconButton.name: "Icon"
UserVaultSettingsView.model.title: "%userName% > %vaultName% > Settings"
UserVaultSettingsView.wording.notAValidNumber: "Not a valid number"
UserVaultView.vaultInformationButton.lore.createdAt: "Created at: **%date%**"
UserVaultView.vaultInformationButton.lore.founder: "Founder: **%founderName%**"
UserVaultView.vaultInformationButton.lore.holder: "Holder: **%holderName%**"
UserVaultView.vaultInformationButton.lore.nextCreationCost: "Next creation cost: %time%"
UserVaultView.vaultInformationButton.lore.notDefined: "NOT DEFINED"
UserVaultView.vaultInformationButton.lore.oneTime: "One Time"
UserVaultView.vaultInformationButton.lore.size: "Size: **%amount%** **Slots** (**%freeAmount% free**)"
UserVaultView.vaultInformationButton.lore.vaultType: "Vault Type: **%vaultTypeName%**"
UserVaultView.vaultInformationButton.name: "Vault Information"
UserVaultView.vaultInformationButton.usedCurrency: "Currency: %currencyMode%"
UserVaultView.vaultInformationButton.usedCurrency.customCurrency: "Custom Currency **(%currencyName%)**"
UserVaultView.vaultInformationButton.usedCurrency.vaultCurrency: "Vault Currency"
UserVaultView.vaultInformationButton.usedCurrency.vaultCurrency.notChosen: "Not chosen yet"
UserVaultView.vaultSettingsButton.lore.click: "**Click** to view"
UserVaultView.vaultSettingsButton.lore.description1: "Manage your vault name, icon, vault type,"
UserVaultView.vaultSettingsButton.lore.description2: "users you want to share this vault with"
UserVaultView.vaultSettingsButton.lore.description3: "based on defined permissions as well"
UserVaultView.vaultSettingsButton.lore.description4: "as transferring the ownership of it"
UserVaultView.vaultSettingsButton.name: "Vault Settings"
UserView.itemBlacklistButton.lore.blacklistedItems: "Blacklisted Items:"
UserView.itemBlacklistButton.lore.blacklistedItems.none: "None"
UserView.itemBlacklistButton.lore.blacklistedItemsAmount: "Blacklisted Items: **%amount%**"
UserView.itemBlacklistButton.lore.click: "**Click** to **manage** item blacklist"
UserView.itemBlacklistButton.lore.description1: "Define items which can't get added"
UserView.itemBlacklistButton.lore.description2: "to vaults by this user"
UserView.itemBlacklistButton.name: "Item Blacklist"
UserView.model.title: "User > %target%"
UserView.ownVaultsButton.lore.click: "**Click** to view"
UserView.ownVaultsButton.lore.description1: "View and manage all own"
UserView.ownVaultsButton.lore.description2: "vaults of this user"
UserView.ownVaultsButton.lore.ownVaultsAmount: "Own Vaults: **%amount%**"
UserView.ownVaultsButton.name: "Own Vaults"
UserView.sharedVaultsButton.lore.click: "**Click** to view"
UserView.sharedVaultsButton.lore.description1: "View and manage all vaults which"
UserView.sharedVaultsButton.lore.description2: "were shared with this user"
UserView.sharedVaultsButton.lore.sharedVaultsAmount: "Shared Vaults: **%amount%**"
UserView.sharedVaultsButton.name: "Shared Vaults"
VaultExtendInventoryItemListView.action.title: "Listed Items > Material"
VaultExtendInventoryItemListView.button.action.customModel.title.main: "Custom Model Id"
VaultExtendInventoryItemListView.button.action.customModel.title.sub: "Change the custom model id of this item"
VaultExtendInventoryItemListView.button.action.damageValue.title.main: "Durability"
VaultExtendInventoryItemListView.button.action.damageValue.title.sub: "Change the damage value of this item"
VaultExtendInventoryItemListView.button.action.example: "Example: **0** or **215**"
VaultExtendInventoryItemListView.button.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
VaultExtendInventoryItemListView.button.lore.currentMaterial: "Current Material: **%materialName%**"
VaultExtendInventoryItemListView.button.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
VaultExtendInventoryItemListView.button.lore.description1: "Choose the damage value and custom model data to optionally"
VaultExtendInventoryItemListView.button.lore.description2: "specify the to be listed item even more detailed."
VaultExtendInventoryItemListView.button.lore.left: "**Left Click** to **change** damage value"
VaultExtendInventoryItemListView.button.lore.pressQ: "**Press Q** to **delete** "
VaultExtendInventoryItemListView.button.lore.right: "**Right Click** to **reset** custom item data"
VaultExtendInventoryItemListView.button.lore.shiftLeft: "**Shift + Left Click** to **change** custom model data"
VaultExtendInventoryItemListView.gui.title: "%vaultName% > Item List"
VaultExtendInventoryItemListView.itemImport.alreadyContainsItemStack: "This ItemStack is already in the list of vault **%vaultName%**"
VaultExtendInventoryItemListView.lore: "**Click** to create new listed item"
VaultExtendInventoryItemListView.name: "New Listed Item"
VaultExtendInventoryItemListView.wording.notAValidNumber: "Not a valid number"
VaultExtendInventorySetupView.gui.title: "%vaultName% > Extend Inventory"
VaultExtendInventorySetupView.modeButton.lore.click: "**Click** to **toggle** restriction mode"
VaultExtendInventorySetupView.modeButton.lore.description1.blacklist: "In this mode all items except the items"
VaultExtendInventorySetupView.modeButton.lore.description1.whitelist: "In this mode only the items in your"
VaultExtendInventorySetupView.modeButton.lore.description2.blacklist: "in your configured list will extend the"
VaultExtendInventorySetupView.modeButton.lore.description2.whitelist: "configured list will extend the"
VaultExtendInventorySetupView.modeButton.lore.description3.blacklist: "space of your inventory"
VaultExtendInventorySetupView.modeButton.lore.description3.whitelist: "space of your inventory"
VaultExtendInventorySetupView.modeButton.name.blacklist: "Blacklist"
VaultExtendInventorySetupView.modeButton.name.whitelist: "Whitelist"
VaultInteractionListView.button.lore.interactedAt: "Interacted At: **%time%**"
VaultInteractionListView.button.lore.interactedPlayer: "Interacted Player: **%user%**"
VaultInteractionListView.button.lore.interactionType: "Interaction Type: **%interactionType%**"
VaultInteractionListView.button.lore.pressQ: "**Press Q** to **delete**"
VaultInteractionListView.gui.title: "%vaultName% > Interactions"
VaultListView.gui.title: "Overview > Vaults"
VaultListView.onlineFilter.disableAction: "Click to **show** Vaults of Online Users"
VaultListView.onlineFilter.enableAction: "Click to **hide** Vaults of Offline Users"
VaultListView.onlineFilter.title: "Visibility"
VaultListView.ownVaultButton.action.deletion.title: "deletion of vault '%vaultName%'"
VaultListView.ownVaultButton.action.openVault.title: "%user% > Vaults > %vaultName%"
VaultListView.ownVaultButton.lore.createdAt: "Created at: **%date%**"
VaultListView.ownVaultButton.lore.currentHolder: "Current holder: **%holderName%**"
VaultListView.ownVaultButton.lore.currentLockState: "Current lock state:"
VaultListView.ownVaultButton.lore.currentVaultType: "Current vault type: **%vaultTypeName%**"
VaultListView.ownVaultButton.lore.holder: "Founder: **%founderName%**"
VaultListView.ownVaultButton.lore.lastAccess: "Last access: **%date%**"
VaultListView.ownVaultButton.lore.leftClick: "**Left Click** to open"
VaultListView.ownVaultButton.lore.notDefined: "NOT DEFINED"
VaultListView.ownVaultButton.lore.pressQ: "**Press Q** to **delete**"
VaultListView.ownVaultButton.lore.rightClick: "**Right Click** to **switch** lock state"
VaultQuickAccessCommand.action.title: "%user% > Vaults > %vaultName%"
VaultQuickAccessCommand.noPreferredVault: "You haven't chosen a preferred vault yet"
VaultSettingsView.interactionLogButton.lore.click: "**Click** to view"
VaultSettingsView.interactionLogButton.lore.description1: "View the log of which user deposited"
VaultSettingsView.interactionLogButton.lore.description2: "and withdrew which items"
VaultSettingsView.interactionLogButton.lore.interactionAmount: "Interactions: **%amount%**"
VaultSettingsView.interactionLogButton.name: "Interaction Log"
VaultSettingsView.nameButton.action.confirm.title: "Confirm rename for %price% (%currency%)"
VaultSettingsView.nameButton.action.title.main: "Vault Name"
VaultSettingsView.nameButton.action.title.sub: "Type in a new vault name"
VaultSettingsView.nameButton.lore.click: "**Click** to change vault name"
VaultSettingsView.nameButton.name: "Vault Name"
VaultSettingsView.nameButton.withFee: "Successfully changed name for **%fee%** to **%vaultName%**"
VaultSettingsView.nameButton.withFeeFailed: "change name of this vault"
VaultSettingsView.nameButton.withoutFee: "Successfully changed name to **%vaultName%**"
VaultSettingsView.noPermissionsButton.lore1: "You don't have enough permissions"
VaultSettingsView.noPermissionsButton.lore2: "to view this button"
VaultSettingsView.noPermissionsButton.name: "Missing Permissions"
VaultSettingsView.preferredVaultButton.lore.description1: "A preferred vault will be used for the quick access"
VaultSettingsView.preferredVaultButton.lore.description2: "command and the extending inventory feature if"
VaultSettingsView.preferredVaultButton.lore.description3: "its enabled by the server administrator"
VaultSettingsView.preferredVaultButton.lore.extendInventoryStatus: "Extend Inventory Status: %status%"
VaultSettingsView.preferredVaultButton.lore.leftClick: "**Left Click** to **toggle** preferred state for this vault"
VaultSettingsView.preferredVaultButton.lore.pressQ: "**Press Q** to %action% extending inventory"
VaultSettingsView.preferredVaultButton.lore.rightClick: "**Right Click** to setup use of extending inventory"
VaultSettingsView.preferredVaultButton.lore.thisIsPreferredVault: "(This is your preferred vault)"
VaultSettingsView.preferredVaultButton.name: "Preferred Vault"
VaultSettingsView.sharedAccessesButton.lore.click: "**Click** to manage"
VaultSettingsView.sharedAccessesButton.lore.description1: "Grant other users access to your vault"
VaultSettingsView.sharedAccessesButton.lore.description2: "based on defined permissions"
VaultSettingsView.sharedAccessesButton.name: "Shared Accesses"
VaultSettingsView.transferOwnershipButton.action.confirm: "Confirm transfer for %price% (%currency%)"
VaultSettingsView.transferOwnershipButton.action.confirmUser: "Confirm transfer to %userName%"
VaultSettingsView.transferOwnershipButton.action.successNewHolder: "**%oldHolder%** granted you ownership of his vault **%vaultName%** which is based on vault type **%vaultType%**"
VaultSettingsView.transferOwnershipButton.action.title: "%vaultName% > Transfer Ownership"
VaultSettingsView.transferOwnershipButton.actionWithFee: "Successfully transferred **%vaultName%** for **%fee%** to **%newHolderName%**"
VaultSettingsView.transferOwnershipButton.actionWithFeeFailed: "transferring the ownership of this vault to a new holder"
VaultSettingsView.transferOwnershipButton.actionWithoutFee: "Successfully transferred **%vaultName%** to **%newHolderName%**"
VaultSettingsView.transferOwnershipButton.failedLocked: "You can't transfer this vault because it's locked"
VaultSettingsView.transferOwnershipButton.limitReachedFailed: "You can't transfer your vault to **%user%** because this user has reached its limit of vaults"
VaultSettingsView.transferOwnershipButton.lore.click: "**Click** to select new holder"
VaultSettingsView.transferOwnershipButton.lore.currentHolder: "Current holder: **%holderName%**"
VaultSettingsView.transferOwnershipButton.lore.description1: "Permanently transfer the ownership of"
VaultSettingsView.transferOwnershipButton.lore.description2: "this vault to the user you select"
VaultSettingsView.transferOwnershipButton.lore.description3: "(You will lose all access to this vault)"
VaultSettingsView.transferOwnershipButton.name: "Transfer Ownership"
VaultSettingsView.transferOwnershipButton.transferToYourselfFailed: "You can't transfer your own vault to yourself"
VaultSettingsView.vaultCurrency: "Vault Currency"
VaultSettingsView.vaultTypeButton.action.confirm.title: "Confirm upgrade for %price% (%currency%)"
VaultSettingsView.vaultTypeButton.action.vaultTypeSelector.title: "%vaultName% > Vault Type Upgrade"
VaultSettingsView.vaultTypeButton.actionWithFee: "Successfully upgraded for **%fee%** to vault type **%vaultTypeName%**"
VaultSettingsView.vaultTypeButton.actionWithFeeFailed: "upgrade this vault to vault type **%vaultTypeName%**"
VaultSettingsView.vaultTypeButton.actionWithoutFee: "Successfully upgraded to vault type **%vaultTypeName%**"
VaultSettingsView.vaultTypeButton.lore.click: "**Click** to upgrade your vault type"
VaultSettingsView.vaultTypeButton.lore.currentVaultType: "Current Vault Type: **%vaultTypeName%**"
VaultSettingsView.vaultTypeButton.lore.description1: "Upgrade your current vault type, the upgrade"
VaultSettingsView.vaultTypeButton.lore.description2: "price will exclude the already paid balance"
VaultSettingsView.vaultTypeButton.name: "Vault Type"
VaultSharedAccessEditView.click: "**Click** to toggle"
VaultSharedAccessEditView.currentStatus: "Current Status: %status%"
VaultSharedAccessEditView.deletingLogsButton.description1: "Define if the user should be able to"
VaultSharedAccessEditView.deletingLogsButton.description2: "delete entries of the interaction log"
VaultSharedAccessEditView.deletingLogsButton.name: "Deleting Logs"
VaultSharedAccessEditView.depositButton.description1: "Define if the user should be able"
VaultSharedAccessEditView.depositButton.description2: "to deposit items to the vault"
VaultSharedAccessEditView.depositButton.name: "Deposit Items"
VaultSharedAccessEditView.gui.title: "%vaultName% > %user% > Edit Access"
VaultSharedAccessEditView.manageSharedAccessButton.description1: "Define if the user should be able"
VaultSharedAccessEditView.manageSharedAccessButton.description2: "to manage shared accesses"
VaultSharedAccessEditView.manageSharedAccessButton.name: "Manage Shared Accesses"
VaultSharedAccessEditView.status.allowed: "Allowed"
VaultSharedAccessEditView.status.disallowed: "Disallowed"
VaultSharedAccessEditView.transferOwnershipButton.description1: "Define if the user should be able to"
VaultSharedAccessEditView.transferOwnershipButton.description2: "transfer the ownership of this vault"
VaultSharedAccessEditView.transferOwnershipButton.name: "Transfer Ownership"
VaultSharedAccessEditView.viewingLogsButton.description1: "Define if the user should be able"
VaultSharedAccessEditView.viewingLogsButton.description2: "to view the interaction log"
VaultSharedAccessEditView.viewingLogsButton.name: "Viewing Logs"
VaultSharedAccessEditView.withdrawButton.description1: "Define if the user should be able"
VaultSharedAccessEditView.withdrawButton.description2: "to withdraw items from the vault"
VaultSharedAccessEditView.withdrawButton.name: "Withdraw Items"
VaultSharedAccessListView.button.action.deletion.title: "Confirm delete access of '%user%'"
VaultSharedAccessListView.button.lore.allowed: "Allowed"
VaultSharedAccessListView.button.lore.deletingLogs: "Deleting Logs: %status%"
VaultSharedAccessListView.button.lore.depositItems: "Depositing Items: %status%"
VaultSharedAccessListView.button.lore.disallowed: "Disallowed"
VaultSharedAccessListView.button.lore.leftClick: "**Left Click** to manage"
VaultSharedAccessListView.button.lore.manageSharedAccesses: "Manage Shared Accesses: %status%"
VaultSharedAccessListView.button.lore.pressQ: "**Press Q** to **delete**"
VaultSharedAccessListView.button.lore.transferOwnership: "Transferring Ownership: %status%"
VaultSharedAccessListView.button.lore.viewingLogs: "Viewing Logs: %status%"
VaultSharedAccessListView.button.lore.withdrawItems: "Withdrawing Items: %status%"
VaultSharedAccessListView.gui.title: "%vaultName% > Shared Accesses"
VaultSharedAccessListView.newSharedAccess.action.confirm.title: "Confirm creation for %price% (%currency%)"
VaultSharedAccessListView.newSharedAccess.action.hasAlreadyAccess: "The user **%user%** has already access to this vault"
VaultSharedAccessListView.newSharedAccess.action.selfFailed: "You can't create a new shared access for yourself"
VaultSharedAccessListView.newSharedAccess.action.title: "New Access > Choose User"
VaultSharedAccessListView.newSharedAccess.actionWithFee: "Successfully created a new shared access for **%fee%** for user **%userName%** in vault **%vaultName%**"
VaultSharedAccessListView.newSharedAccess.actionWithFeeFailed: "create a new shared access in vault **%vaultName%** for user **%userName%**"
VaultSharedAccessListView.newSharedAccess.actionWithoutFee: "Successfully created a new shared access for user **%userName%** in vault **%vaultName%**"
VaultSharedAccessListView.newSharedAccess.lore.click: "**Click** to grant a new user"
VaultSharedAccessListView.newSharedAccess.lore.click2: "access to this vault"
VaultSharedAccessListView.newSharedAccess.name: "New Shared Access"
VaultSharedAccessListView.vaultCurrency: "Vault Currency"
VaultTypEditView.purchase: "Current Price: **%currentPrice%**"
VaultTypEditView.purchasePriceButton.action.example: "Example: **100** for a price of 100 of the specific currency"
VaultTypEditView.purchasePriceButton.action.title.main: "Purchase Price"
VaultTypEditView.purchasePriceButton.action.title.sub: "Change the price of this vault type"
VaultTypEditView.sharedAccessButton.action.title.main: "Shared Access Amount"
VaultTypEditView.sharedAccessButton.action.title.sub: "Change the amount of shared accesses"
VaultTypEditView.sharedAccessButton.lore.currentAmount: "Current Amount: **%amount%**"
VaultTypEditView.sizeButton.action.title.main: "Vault Size"
VaultTypEditView.sizeButton.action.title.sub: "Change the vault size of this type"
VaultTypeBlacklistedItemListView.action.title: "Blacklisted Items > Material"
VaultTypeBlacklistedItemListView.action.title.whitelist: "Whitelisted Items > Material"
VaultTypeBlacklistedItemListView.button.action.customModel.title.main: "Custom Model Id"
VaultTypeBlacklistedItemListView.button.action.customModel.title.sub: "Change the custom model id of this item"
VaultTypeBlacklistedItemListView.button.action.damageValue.title.main: "Durability"
VaultTypeBlacklistedItemListView.button.action.damageValue.title.sub: "Change the damage value of this item"
VaultTypeBlacklistedItemListView.button.action.example: "Example: **0** or **215**"
VaultTypeBlacklistedItemListView.button.action.maxAmount.title.main: "Max Amount"
VaultTypeBlacklistedItemListView.button.action.maxAmount.title.sub: "Change the amount this item can be in the vault"
VaultTypeBlacklistedItemListView.button.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
VaultTypeBlacklistedItemListView.button.lore.currentMaterial: "Current Material: **%materialName%**"
VaultTypeBlacklistedItemListView.button.lore.currentMaxAmount: "Current Max Amount: **%amount%**"
VaultTypeBlacklistedItemListView.button.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
VaultTypeBlacklistedItemListView.button.lore.description1: "Choose the damage value and custom model data to optionally"
VaultTypeBlacklistedItemListView.button.lore.description2: "specify the to be blacklisted item even more detailed."
VaultTypeBlacklistedItemListView.button.lore.description3: "As well as setting the max amount this item can be put"
VaultTypeBlacklistedItemListView.button.lore.description4: "inside a vault which is based on this vault type"
VaultTypeBlacklistedItemListView.button.lore.leftClick: "**Left Click** to **change** the max amount this item can contain in vault"
VaultTypeBlacklistedItemListView.button.lore.pressQ: "**Press Q** to **delete** "
VaultTypeBlacklistedItemListView.button.lore.rightClick: "**Right Click** to **change** custom model data"
VaultTypeBlacklistedItemListView.button.lore.shiftLeftClick: "**Shift + Left Click** to **change** damage value"
VaultTypeBlacklistedItemListView.button.lore.shiftRightClick: "**Shift + Right Click** to **reset** custom item data"
VaultTypeBlacklistedItemListView.gui.title: "%vaultTypeName% > Blacklisted Items"
VaultTypeBlacklistedItemListView.gui.title.whitelist: "%vaultTypeName% > Whitelisted Items"
VaultTypeBlacklistedItemListView.itemImport.alreadyContainsItemStack: "This ItemStack is already in the blacklist of vault type **%vaultTypeName%**"
VaultTypeBlacklistedItemListView.itemImport.alreadyContainsItemStack.whitelist: "This ItemStack is already in the whitelist of vault type **%vaultTypeName%**"
VaultTypeBlacklistedItemListView.lore: "**Click** to create new blacklisted item"
VaultTypeBlacklistedItemListView.lore.whitelist: "**Click** to create new whitelisted item"
VaultTypeBlacklistedItemListView.name: "New Blacklisted Item"
VaultTypeBlacklistedItemListView.name.whitelist: "New Whitelisted Item"
VaultTypeBlacklistedItemListView.wording.notAValidNumber: "Not a valid number"
VaultTypeEditView.currencyButton.currencyPicker.title: "%vaultTypeName% > Currency"
VaultTypeEditView.currencyButton.lore.desc1: "Use this option to define which currency"
VaultTypeEditView.currencyButton.lore.desc2: "should be used to purchase this vault type"
VaultTypeEditView.currencyButton.lore.leftClick: "**Left Click** to select **custom** currency"
VaultTypeEditView.currencyButton.lore.mode: "Mode"
VaultTypeEditView.currencyButton.lore.mode.customCurrency: "Custom Currency"
VaultTypeEditView.currencyButton.lore.mode.vaultCurrency: "Vault Currency"
VaultTypeEditView.currencyButton.lore.mode.vaultCurrency.notChosen: "Not chosen yet"
VaultTypeEditView.currencyButton.lore.pressQ: "**Press Q** to use default **Vault currency**"
VaultTypeEditView.currencyButton.name: "Custom Currency"
VaultTypeEditView.currencyButton.notInstalled.lore.desc1: "**UltraEconomy** is **not** installed"
VaultTypeEditView.currencyButton.notInstalled.lore.desc2: "To support multiple or custom"
VaultTypeEditView.currencyButton.notInstalled.lore.desc3: "currencies UltraEconomy is required"
VaultTypeEditView.currencyButton.notInstalled.name: "Missing UltraEconomy"
VaultTypeEditView.gui.title: "Vault Types > %vaultType%"
VaultTypeEditView.iconButton.action.customModel.title.main: "Custom Model Id"
VaultTypeEditView.iconButton.action.customModel.title.sub: "Change the custom model id of this item"
VaultTypeEditView.iconButton.action.damageValue.title.main: "Durability"
VaultTypeEditView.iconButton.action.damageValue.title.sub: "Change the damage value of this item"
VaultTypeEditView.iconButton.action.example: "Example: **0** or **215**"
VaultTypeEditView.iconButton.action.materialPicker.title: "%vaultTypeName% > Material"
VaultTypeEditView.iconButton.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
VaultTypeEditView.iconButton.lore.currentMaterial: "Current Material: **%materialName%**"
VaultTypeEditView.iconButton.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
VaultTypeEditView.iconButton.lore.description1: "Choose the icon, damage value and custom model"
VaultTypeEditView.iconButton.lore.description2: "data this vault type will show up as"
VaultTypeEditView.iconButton.lore.leftClick: "**Left Click** to **change** icon"
VaultTypeEditView.iconButton.lore.pressQ: "**Press Q** to **reset** custom item data"
VaultTypeEditView.iconButton.lore.rightClick: "**Right Click** to **change** damage value"
VaultTypeEditView.iconButton.lore.shiftRightClick: "**Shift + Right Click** to **change** custom model data"
VaultTypeEditView.iconButton.name: "Icon"
VaultTypeEditView.itemBlacklistButton.lore.blacklist: "Blacklist"
VaultTypeEditView.itemBlacklistButton.lore.blacklistedItems: "Blacklisted Items:"
VaultTypeEditView.itemBlacklistButton.lore.blacklistedItemsAmount: "Blacklisted Items: **%amount%**"
VaultTypeEditView.itemBlacklistButton.lore.blacklistedItemsNone: "None"
VaultTypeEditView.itemBlacklistButton.lore.click: "**Left Click** to **manage** item %listType%"
VaultTypeEditView.itemBlacklistButton.lore.description1: "Define items which can't get added"
VaultTypeEditView.itemBlacklistButton.lore.description2: "to vaults based on this type"
VaultTypeEditView.itemBlacklistButton.lore.rightClick: "**Right Click** to **switch** to %listType%"
VaultTypeEditView.itemBlacklistButton.lore.whitelist: "Whitelist"
VaultTypeEditView.itemBlacklistButton.lore.whitelistedItems: "Whitelisted Items:"
VaultTypeEditView.itemBlacklistButton.lore.whitelistedItemsAmount: "Whitelisted Items: **%amount%**"
VaultTypeEditView.itemBlacklistButton.name: "Item Blacklist"
VaultTypeEditView.itemListButton.lore.click: "**Click** to **manage** item list"
VaultTypeEditView.itemListButton.lore.description1: "Select items which will be used"
VaultTypeEditView.itemListButton.lore.description2: "by the extending inventory mode"
VaultTypeEditView.itemListButton.lore.selectedItems: "Selected Items:"
VaultTypeEditView.itemListButton.lore.selectedItemsAmount: "Selected Items: **%amount%**"
VaultTypeEditView.itemListButton.lore.selectedItemsNone: "None"
VaultTypeEditView.itemListButton.name: "Item List"
VaultTypeEditView.itemWhitelistButton.name: "Item Whitelist"
VaultTypeEditView.preDefinedItemsButton.lore.click: "**Click** to **manage** pre defined Items"
VaultTypeEditView.preDefinedItemsButton.lore.description1: "Define items which will be automatically"
VaultTypeEditView.preDefinedItemsButton.lore.description2: "added to a fresh created Vault which"
VaultTypeEditView.preDefinedItemsButton.lore.description3: "is based on this Vault Type"
VaultTypeEditView.preDefinedItemsButton.lore.preDefinedItems: "Pre defined Items:"
VaultTypeEditView.preDefinedItemsButton.lore.preDefinedItemsAmount: "Pre defined Items: **%amount%**"
VaultTypeEditView.preDefinedItemsButton.lore.preDefinedItemsNone: "None"
VaultTypeEditView.preDefinedItemsButton.name: "Pre Defined Items"
VaultTypeEditView.purchasePriceButton.lore.click: "**Click** to **change** price"
VaultTypeEditView.purchasePriceButton.lore.description1: "Define the price a user has to pay"
VaultTypeEditView.purchasePriceButton.lore.description2: "to create an vault based on this type"
VaultTypeEditView.purchasePriceButton.lore.pressQ: "**Press Q** to **reset** price"
VaultTypeEditView.purchasePriceButton.name: "Purchase Price"
VaultTypeEditView.renameButton.action.title.main: "Vault Type Name"
VaultTypeEditView.renameButton.action.title.sub: "Change the name of this vault type"
VaultTypeEditView.renameButton.lore.click: "**Click** to **rename**"
VaultTypeEditView.renameButton.lore.currentName: "Current Name: %currentName%"
VaultTypeEditView.renameButton.lore.description1: "The name will show up for users, when"
VaultTypeEditView.renameButton.lore.description2: "they select the vault they want to purchase"
VaultTypeEditView.renameButton.name: "Rename"
VaultTypeEditView.sharedAccessButton.action.example: "Example: **5** for being able to share the vault with 5 more users"
VaultTypeEditView.sharedAccessButton.lore.click: "**Click** to **change** amount"
VaultTypeEditView.sharedAccessButton.lore.description1: "Define the amount of users the vault"
VaultTypeEditView.sharedAccessButton.lore.description2: "based on this type can get shared with "
VaultTypeEditView.sharedAccessButton.name: "Shared Access"
VaultTypeEditView.sizeButton.action.example: "Example: **32** for 32 slots"
VaultTypeEditView.sizeButton.lore.click: "**Click** to **change** size"
VaultTypeEditView.sizeButton.lore.currentSize: "Current Size: **%currentSize%**"
VaultTypeEditView.sizeButton.lore.description1: "Define the size a vault will have"
VaultTypeEditView.sizeButton.lore.description2: "if its based on this type"
VaultTypeEditView.sizeButton.name: "Vault Size"
VaultTypeEditView.wording.notAValidNumber: "Not a valid number"
VaultTypeListView.createVaultTypeButton.action.name.actionbar: "The name will be displayed by default if not renamed by the user itself"
VaultTypeListView.createVaultTypeButton.action.name.title.main: "Vault Type Name"
VaultTypeListView.createVaultTypeButton.action.name.title.sub: "Name the Vault Type you want to create"
VaultTypeListView.createVaultTypeButton.lore: "Click to **create** a new vault type"
VaultTypeListView.createVaultTypeButton.name: "New Vault Type"
VaultTypeListView.gui.title: "Overview > Vault Types"
VaultTypeListView.reorder.action: "Click to modify the order"
VaultTypeListView.reorder.title: "Change Order"
VaultTypeListView.vaultTypeButton.action.permission.actionBar: "Type in **none** to reset permission"
VaultTypeListView.vaultTypeButton.action.permission.title.main: "Vault Type Permission"
VaultTypeListView.vaultTypeButton.action.permission.title.sub: "Type in a new permission"
VaultTypeListView.vaultTypeButton.amountSharedAccess: "Amount Shared Access: **%amount%**"
VaultTypeListView.vaultTypeButton.lore.blacklistedItems: "Blacklisted Items:"
VaultTypeListView.vaultTypeButton.lore.blacklistedItemsAmount: "Blacklisted Items: **%amount%**"
VaultTypeListView.vaultTypeButton.lore.blacklistedItemsNone: "None"
VaultTypeListView.vaultTypeButton.lore.currentPermission: "Permission: %permission%"
VaultTypeListView.vaultTypeButton.lore.deleteVaultType: "Confirm deletion '%vaultType%'"
VaultTypeListView.vaultTypeButton.lore.leftClick: "**Left Click** to edit Vault Type"
VaultTypeListView.vaultTypeButton.lore.leftShiftClick: "**Shift + Left Click** to **set** permission"
VaultTypeListView.vaultTypeButton.lore.preDefinedItems: "Pre Defined Items:"
VaultTypeListView.vaultTypeButton.lore.preDefinedItemsAmount: "Pre Defined Items: **%amount%**"
VaultTypeListView.vaultTypeButton.lore.preDefinedItemsDesc1: "This Vault Type contains pre defined Items which"
VaultTypeListView.vaultTypeButton.lore.preDefinedItemsDesc2: "will be added automatically for free to your"
VaultTypeListView.vaultTypeButton.lore.preDefinedItemsDesc3: "new Vault if its based on this Vault Type"
VaultTypeListView.vaultTypeButton.lore.q: "**Press Q** to **delete**"
VaultTypeListView.vaultTypeButton.lore.rightClick: "**Right Click** to %action% for purchase"
VaultTypeListView.vaultTypeButton.lore.rightShiftClick: "**Shift + Right Click** to %action% lock on losing perm"
VaultTypeListView.vaultTypeButton.lore.whitelistedItems: "Whitelisted Items:"
VaultTypeListView.vaultTypeButton.lore.whitelistedItemsAmount: "Whitelisted Items: **%amount%**"
VaultTypeListView.vaultTypeButton.purchasePrice: "Purchase Price: **%purchasePrice%**"
VaultTypeListView.vaultTypeButton.size: "Size: **%amount%**"
VaultTypeListView.vaultTypeButton.status: "%status% for getting purchased"
VaultTypeListView.vaultTypeButton.usedCurrency: "Currency: %currencyMode%"
VaultTypeListView.vaultTypeButton.usedCurrency.customCurrency: "Custom Currency **(%currencyName%)**"
VaultTypeListView.vaultTypeButton.usedCurrency.vaultCurrency: "Vault Currency"
VaultTypeListView.vaultTypeButton.usedCurrency.vaultCurrency.notChosen: "Not chosen yet"
VaultTypePreDefinedItemListView.action.title: "Pre Defined Items > Material"
VaultTypePreDefinedItemListView.button.action.customModel.title.main: "Custom Model Id"
VaultTypePreDefinedItemListView.button.action.customModel.title.sub: "Change the custom model id of this item"
VaultTypePreDefinedItemListView.button.action.damageValue.title.main: "Durability"
VaultTypePreDefinedItemListView.button.action.damageValue.title.sub: "Change the damage value of this item"
VaultTypePreDefinedItemListView.button.action.example: "Example: **0** or **215**"
VaultTypePreDefinedItemListView.button.lore.currentDamageValue: "Current Damage Value: **%damageValue%**"
VaultTypePreDefinedItemListView.button.lore.currentMaterial: "Current Material: **%materialName%**"
VaultTypePreDefinedItemListView.button.lore.currentModelData: "Current Custom Model Id: **%customModelId%**"
VaultTypePreDefinedItemListView.button.lore.description1: "Choose the damage value and custom model data"
VaultTypePreDefinedItemListView.button.lore.description2: "to optionally specify the pre Defined item"
VaultTypePreDefinedItemListView.button.lore.description3: "even more detailed."
VaultTypePreDefinedItemListView.button.lore.description4: "inside a vault which is based on this vault type"
VaultTypePreDefinedItemListView.button.lore.leftClick: "**Left Click** to **change** damage value"
VaultTypePreDefinedItemListView.button.lore.pressQ: "**Press Q** to **delete** "
VaultTypePreDefinedItemListView.button.lore.rightClick: "**Right Click** to **change** custom model data"
VaultTypePreDefinedItemListView.button.lore.shiftRightClick: "**Shift + Right Click** to **reset** custom item data"
VaultTypePreDefinedItemListView.gui.title: "%vaultTypeName% > Pre Defined Items"
VaultTypePreDefinedItemListView.lore: "**Click** to add new pre defined Item"
VaultTypePreDefinedItemListView.name: "New Pre Defined Item"
VaultTypePreDefinedItemListView.wording.notAValidNumber: "Not a valid number"
VaultTypePreDefinedItemShowcaseView.gui.title: "%vaultTypeName% > Pre Defined Items"
VaultTypeReorderView.entry.deselectAction: "**Left Click** to **deselect** this Vault Type"
VaultTypeReorderView.entry.grabAction: "**Left Click** to **grab** this Vault Type"
VaultTypeReorderView.entry.swapAction: "**Left Click** to swap with **%vaultType%**"
VaultTypeReorderView.gui.title: "Vault Types > Reorder"
VaultTypeSelectorView.construct.amountSharedAccess: "Amount Shared Access: **%amount%**"
VaultTypeSelectorView.construct.lore: "**Left Click** to **select**"
VaultTypeSelectorView.construct.lore.blacklistedItems: "Blacklisted Items:"
VaultTypeSelectorView.construct.lore.blacklistedItemsAmount: "Blacklisted Items: **%amount%**"
VaultTypeSelectorView.construct.lore.blacklistedItemsNone: "None"
VaultTypeSelectorView.construct.lore.whitelistedItems: "Whitelisted Items:"
VaultTypeSelectorView.construct.lore.whitelistedItemsAmount: "Whitelisted Items: **%amount%**"
VaultTypeSelectorView.construct.purchasePrice: "Purchase Price: **%purchasePrice%**"
VaultTypeSelectorView.construct.rightClick: "**Right Click** to **show** pre defined Items"
VaultTypeSelectorView.construct.size: "Size: **%amount%**"
VaultTypeSelectorView.construct.status: "%status% for getting purchased"
VaultTypeSelectorView.construct.usedCurrency: "Currency: %currencyMode%"
VaultTypeSelectorView.construct.usedCurrency.customCurrency: "Custom Currency **(%currencyName%)**"
VaultTypeSelectorView.construct.usedCurrency.vaultCurrency: "Vault Currency"
VaultTypeSelectorView.construct.usedCurrency.vaultCurrency.notChosen: "Not chosen yet"
VaultTypeUpgradeView.construct.amountSharedAccess: "Amount Shared Access: **%amount%**"
VaultTypeUpgradeView.construct.lore: "**Click** to **select**"
VaultTypeUpgradeView.construct.notUpgradesAvailable: "No Upgrades Available"
VaultTypeUpgradeView.construct.purchasePrice: "Purchase Price: **%purchasePrice%**"
VaultTypeUpgradeView.construct.size: "Size: **%amount%**"
VaultTypeUpgradeView.construct.usedCurrency: "Currency: %currencyMode%"
VaultTypeUpgradeView.construct.usedCurrency.customCurrency: "Custom Currency **(%currencyName%)**"
VaultTypeUpgradeView.construct.usedCurrency.vaultCurrency: "Vault Currency"
VaultTypeUpgradeView.construct.usedCurrency.vaultCurrency.notChosen: "Not chosen yet"
VaultsCommand.notValid: "Invalid User"
VaultsView.communityVaultButton.lore.click: "**Click** to open"
VaultsView.communityVaultButton.lore.currentAmount: "Current Item Amount: **%amount%**"
VaultsView.communityVaultButton.lore.description1: "The community vault can be used by any user"
VaultsView.communityVaultButton.lore.description1.newUser: "Only **New Users** can withdraw"
VaultsView.communityVaultButton.lore.description2: "to deposit and withdraw items from it"
VaultsView.communityVaultButton.lore.description2.depositOnly: "to deposit items to it"
VaultsView.communityVaultButton.lore.description2.newUser: "items from this vault"
VaultsView.communityVaultButton.lore.description2.withdrawOnly: "to withdraw items from it"
VaultsView.gui.title: "Vaults Overview"
VaultsView.lore.none: "None"
VaultsView.ownVaultsButton.lore.click: "**Click** to view"
VaultsView.ownVaultsButton.lore.description1: "Create new vaults and manage"
VaultsView.ownVaultsButton.lore.description2: "your existing vaults"
VaultsView.ownVaultsButton.lore.headline.ownVaultsAmount: "Own Vaults: **%amount%**"
VaultsView.ownVaultsButton.lore.headline.users: "Own Vaults"
VaultsView.ownVaultsButton.name: "Own Vaults"
VaultsView.sharedVaultsButton.lore.click: "**Click** to view"
VaultsView.sharedVaultsButton.lore.description1: "Manage vaults to which you"
VaultsView.sharedVaultsButton.lore.description2: "have been granted access"
VaultsView.sharedVaultsButton.lore.headline.sharedVaultsAmount: "Shared Vaults: **%amount%**"
VaultsView.sharedVaultsButton.lore.headline.users: "Shared Vaults"
VaultsView.sharedVaultsButton.name: "Shared Vaults"
VaultsView.userSettingsButton.lore.click: "**Click** to manage"
VaultsView.userSettingsButton.lore.desc1: "Manage your own Settings like toggle"
VaultsView.userSettingsButton.lore.desc2: "Item Deposit & Withdraw messages"
VaultsView.userSettingsButton.name: "Own Settings"
argument.user: "<User>"
argument.vaultType: "<VaultType>"
